"""
Test AI Manager corrig√©
"""

from src.ai_revenue_manager.llm_manager import AIRevenueManager

def test_ai_scenarios():
    """Test de diff√©rents sc√©narios"""
    
    print("üß™ TEST AI REVENUE MANAGER")
    print("=" * 40)
    
    # Initialiser l'AI Manager
    ai = AIRevenueManager()
    print("‚úÖ AI Manager initialis√©")
    
    # Sc√©nario 1 : Situation normale
    print("\nüìä SC√âNARIO 1: Situation normale")
    hotel_data = {
        'occupancy_rate': 0.72,
        'current_price': 175,
        'min_price': 80,
        'max_price': 300
    }
    market_data = {
        'competitor_prices': [180, 190, 165, 185],
        'events': [],  # Pas d'√©v√©nements
        'weather': 'Ensoleill√©'
    }
    
    try:
        result = ai.analyze_situation(hotel_data, market_data)
        print("   ‚úÖ Analyse r√©ussie")
        print(f"   - Type: {result['prompt_type']}")
        print(f"   - Prix recommand√©: {result['analysis']['recommended_price']}‚Ç¨")
        print(f"   - Confiance: {result['analysis']['confidence_score']:.0%}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Sc√©nario 2 : Avec √©v√©nement
    print("\nüé™ SC√âNARIO 2: Avec √©v√©nement")
    market_data_event = {
        'competitor_prices': [200, 220, 190, 210],
        'events': ['Salon du tourisme'],
        'weather': 'Parfait'
    }
    
    try:
        result = ai.analyze_situation(hotel_data, market_data_event)
        print("   ‚úÖ Analyse r√©ussie")
        print(f"   - Type: {result['prompt_type']}")
        print(f"   - Prix recommand√©: {result['analysis']['recommended_price']}‚Ç¨")
        print(f"   - Confiance: {result['analysis']['confidence_score']:.0%}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Sc√©nario 3 : Crise
    print("\nüö® SC√âNARIO 3: Situation de crise")
    hotel_data_crisis = {
        'occupancy_rate': 0.25,  # Tr√®s faible
        'current_price': 120,
        'min_price': 60,
        'max_price': 300
    }
    market_data_crisis = {
        'competitor_prices': [100, 90, 110, 95],
        'events': [],
        'weather': 'Pluvieux'
    }
    
    try:
        result = ai.analyze_situation(hotel_data_crisis, market_data_crisis)
        print("   ‚úÖ Analyse r√©ussie")
        print(f"   - Type: {result['prompt_type']}")
        print(f"   - Prix recommand√©: {result['analysis']['recommended_price']}‚Ç¨")
        print(f"   - Confiance: {result['analysis']['confidence_score']:.0%}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    print("\nüéâ TOUS LES TESTS TERMIN√âS!")

if __name__ == "__main__":
    test_ai_scenarios()